{"version":3,"file":"static/exposed-PluginRoot.62e0c7a5.chunk.js","mappings":"0mCAMO,SAASA,EAA2BC,GACzC,MAAMC,EALR,SAA8BD,G,IACrBA,EAAP,OAAoC,QAA7BA,EAAAA,aAAAA,EAAAA,EAAeE,sBAAfF,IAAAA,EAAAA,EAAiC,EAC1C,CAG6BG,CAAqBH,GAChD,OAAOC,EAAmBG,KACxB,EAAGC,QAAOC,SAAQC,aAAYC,YAAWC,aACvC,SAACD,EAAAA,IAAuDC,EAAOC,OAA/C,GAAGL,KAASC,KAAUC,MAG5C,CCGO,MAAMI,EAAqB,CAChCC,QAASC,EAAAA,GACTC,iBAAmBd,IACjB,MAAMe,EAAWhB,EAA2BC,GAC5C,OAAO,SAACgB,EAAAA,GAAcA,C,SAAED,MAIfE,EAAwB,CACnCL,QAASM,EAAAA,GACTJ,iBAAmBd,IACjB,MAAMe,EAAWhB,EAA2BC,GAC5C,OAAO,SAACgB,EAAAA,GAAcA,C,SAAED,MAIfI,EAAuB,KAClC,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,MACZC,GAAaC,EAAAA,EAAAA,QAAOC,EAAAA,GAE1B,OAAKJ,EAAMK,SAAS,aAKlB,SAACC,EAAAA,GAAaC,OAAM,CAClBC,MAAM,SACNC,KAAK,OACLC,OAAQC,UAEN,MAAM,MAAEC,SAAgBV,EAAWW,YAAY,CAC7CC,OAAQ,CAAC,iBACTC,OAAQ,CACN,iDACEC,EAAAA,KAGN,OAAOJ,EAAM5B,KAAKiC,GAAWA,EAAOC,SAAST,OAAMU,UAhBhD,MAsBEC,EAAqB,CAACX,EAAcY,KAA2B,CAC1EZ,OACAY,OACAC,MAAO,Y","sources":["webpack://backstage.plugin-techdocs/./src/utils.tsx","webpack://backstage.plugin-techdocs/./src/wrapped.tsx"],"sourcesContent":["import { DynamicConfig, TechdocsAddon } from \"./types\";\n\nfunction getTechdocsAddonData(dynamicConfig: DynamicConfig): TechdocsAddon[] {\n  return dynamicConfig?.techdocsAddons ?? [];\n}\n\nexport function getTechdocsAddonComponents(dynamicConfig: DynamicConfig) {\n  const techdocsAddonsData = getTechdocsAddonData(dynamicConfig);\n  return techdocsAddonsData.map(\n    ({ scope, module, importName, Component, config }) => (\n      <Component key={`${scope}-${module}-${importName}`} {...config.props} />\n    ),\n  );\n}\n","import {\n  EntityTechdocsContent as EntityTechdocsContentBase,\n  TechDocsReaderPage as TechDocsReaderPageBase,\n} from \"@backstage/plugin-techdocs\";\nimport { SearchFilter, useSearch } from \"@backstage/plugin-search-react\";\n\nimport {\n  CATALOG_FILTER_EXISTS,\n  catalogApiRef,\n} from \"@backstage/plugin-catalog-react\";\n\nimport { useApi } from \"@backstage/core-plugin-api\";\nimport { TechDocsAddons } from \"@backstage/plugin-techdocs-react\";\nimport { getTechdocsAddonComponents } from \"./utils\";\nimport { type DynamicConfig } from \"./types\";\n\nexport const TechDocsReaderPage = {\n  element: TechDocsReaderPageBase,\n  staticJSXContent: (dynamicConfig: DynamicConfig) => {\n    const children = getTechdocsAddonComponents(dynamicConfig);\n    return <TechDocsAddons>{children}</TechDocsAddons>;\n  },\n};\n\nexport const EntityTechdocsContent = {\n  element: EntityTechdocsContentBase,\n  staticJSXContent: (dynamicConfig: DynamicConfig) => {\n    const children = getTechdocsAddonComponents(dynamicConfig);\n    return <TechDocsAddons>{children}</TechDocsAddons>;\n  },\n};\n\nexport const TechdocsSearchFilter = () => {\n  const { types } = useSearch();\n  const catalogApi = useApi(catalogApiRef);\n\n  if (!types.includes(\"techdocs\")) {\n    return null;\n  }\n\n  return (\n    <SearchFilter.Select\n      label=\"Entity\"\n      name=\"name\"\n      values={async () => {\n        // Return a list of entities which are documented.\n        const { items } = await catalogApi.getEntities({\n          fields: [\"metadata.name\"],\n          filter: {\n            \"metadata.annotations.backstage.io/techdocs-ref\":\n              CATALOG_FILTER_EXISTS,\n          },\n        });\n        return items.map((entity) => entity.metadata.name).sort();\n      }}\n    />\n  );\n};\n\nexport const techdocsSearchType = (name: string, icon: React.ReactNode) => ({\n  name,\n  icon,\n  value: \"techdocs\",\n});\n"],"names":["getTechdocsAddonComponents","dynamicConfig","techdocsAddonsData","techdocsAddons","getTechdocsAddonData","map","scope","module","importName","Component","config","props","TechDocsReaderPage","element","TechDocsReaderPageBase","staticJSXContent","children","TechDocsAddons","EntityTechdocsContent","EntityTechdocsContentBase","TechdocsSearchFilter","types","useSearch","catalogApi","useApi","catalogApiRef","includes","SearchFilter","Select","label","name","values","async","items","getEntities","fields","filter","CATALOG_FILTER_EXISTS","entity","metadata","sort","techdocsSearchType","icon","value"],"sourceRoot":""}