{"version":3,"file":"static/491.ea643653.chunk.js","mappings":"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","sources":["webpack://backstage.plugin-techdocs-module-addons-contrib/../../node_modules/@material-ui/core/esm/styles/createMuiStrictModeTheme.js","webpack://backstage.plugin-techdocs-module-addons-contrib/../../node_modules/@material-ui/core/esm/styles/createStyles.js","webpack://backstage.plugin-techdocs-module-addons-contrib/../../node_modules/@material-ui/core/esm/styles/cssUtils.js","webpack://backstage.plugin-techdocs-module-addons-contrib/../../node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js","webpack://backstage.plugin-techdocs-module-addons-contrib/../../node_modules/@material-ui/core/esm/styles/withTheme.js"],"sourcesContent":["import { deepmerge } from '@material-ui/utils';\nimport createTheme from './createTheme';\nexport default function createMuiStrictModeTheme(options) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return createTheme.apply(void 0, [deepmerge({\n    unstable_strictMode: true\n  }, options)].concat(args));\n}","import { createStyles as createStylesOriginal } from '@material-ui/styles'; // let warnOnce = false;\n// To remove in v5\n\nexport default function createStyles(styles) {\n  // warning(\n  //   warnOnce,\n  //   [\n  //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',\n  //     'Please use @material-ui/styles/createStyles',\n  //   ].join('\\n'),\n  // );\n  // warnOnce = true;\n  return createStylesOriginal(styles);\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","import { withThemeCreator } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\nvar withTheme = withThemeCreator({\n  defaultTheme: defaultTheme\n});\nexport default withTheme;"],"names":["createMuiStrictModeTheme","options","_len","arguments","length","args","Array","_key","createTheme","apply","deepmerge","unstable_strictMode","concat","createStyles","styles","isUnitless","value","String","parseFloat","toUnitless","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveFontSizes","themeInput","undefined","_options$breakpoints","breakpoints","_options$disableAlign","disableAlign","_options$factor","factor","_options$variants","variants","theme","typography","baseFontSize","convert","toUnit","fromUnit","match","pxLength","outputLength","toFixed","breakpointValues","map","x","values","forEach","variant","style","remFontSize","fontSize","maxFontSize","minFontSize","Error","transform","size","_ref","grid","sizeBelow","sizeAbove","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","_ref3$transform","output","breakpoint","Math","round","responsiveProperty","withThemeCreator","defaultTheme"],"sourceRoot":""}