app:
  title: Devportal
  baseUrl: http://localhost:3000
  analytics:
    ga4:
      measurementId: ${GA_ANALYTICS_ID}
      identity: optional
      #testMode: false # Prevents data being sent to GA
      #debug: true # Logs analytics event to the web console

  support:
    url: https://github.com/orgs/veecode-platform/discussions # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Issues
        icon: github
        links:
          - url: https://github.com/orgs/veecode-platform/discussions
            title: GitHub Issues
#add permission
permission:
  enabled: true
  rbac:
    pluginsWithPermission:
      - catalog
      - scaffolder
      - permission
      - kubernetes
      - veecode-platform-permissions-hub
    admin:
      superUsers:
        - name: user:default/admin
    #policies-csv-file: ../../rbac-policy.csv
    #policyFileReload: true

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  auth:
    externalAccess:
      - type: static
        options:
          token: ${BACKEND_AUTH_SECRET_KEY}
          subject: secret
          
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  database:
    client: pg
    pluginDivisionMode: schema
    connection:
      host: ${DB_HOST}
      database: platform_devportal
      port: ${DB_PORT}
      user: ${DB_USER}
      password: ${DB_PASSWORD}
  #database:
  #  client: better-sqlite3
  #  connection: ':memory:'
  cache:
    store: memory
  cors:
    origin: http://localhost:3000 #http://localhost:3000
    methods: [GET, POST, PUT, DELETE, PATCH]
    credentials: true
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    script-src: ["'self'", "'unsafe-eval'", 'https://www.google-analytics.com', 'https://www.googletagmanager.com']
    img-src: ["'self'", 'data:', 'https://www.google-analytics.com', 'https://platform.vee.codes','https://avatars.githubusercontent.com/']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  reading:
    allow:
      - host: example.com
      - host: "*.mozilla.org"
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

# See README.md in the proxy-backend plugin for information on the configuration format
proxy:
  endpoints:
    "/grafana/api":
      # May be a public or an internal DNS
      target: ${GRAFANA_DOMAIN}
      credentials: require
      headers:
        Authorization: Bearer ${GRAFANA_TOKEN}

    '/gitlab/api':
      target: https://gitlab.com/api/v4
      credentials: require
      allowedHeaders: ['Authorization', 'Content-Type']
      headers:
        Accept: application/json
        Content-Type: 'application/json'

    "/kong-manager/api":
      target: https://api.manager.apr.vee.codes/default
      credentials: require
      allowedHeaders: ['Authorization', 'Content-Type']
      headers: 
        Accept: application/json
        Content-Type: 'application/json'
    
    "/kong-manager/cluster-veecode":
      target: https://api.manager.vkpr.platform.vee.codes/default
      credentials: require
      allowedHeaders: ["Authorization","Content-Type"]
      headers:
        Accept: application/json
        Content-Type: 'application/json'    

organization:
  name: Devportal

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "local"
    # dockerImage: my-org/techdocs # use a custom docker image
    # pullImage: true # or false to disable automatic pulling of image (e.g. if custom docker login is required)
  publisher:
    type: "local" # Alternatives - 'googleGcs' or 'awsS3' or 'azureBlobStorage' or 'openStackSwift'. Read documentation for using alternatives.

kubernetes:
  serviceLocatorMethod:
    type: multiTenant
  clusterLocatorMethods:
    - type: catalog

argocd:
  username: ${ARGOCD_USER}
  password: ${ARGOCD_TOKEN}
  appLocatorMethods:
    - type: "config"
      instances:
        - name: argoInstance1
          url: ${ARGOCD_URL}
          token: ${ARGOCD_AUTH_TOKEN}
integrations:
  # using github app
  #github:
  #  - host: github.com
  #    apps:
  #      - $include: github-app-backstage-devportal-gap-credentials.yaml
  github:
    - host: github.com
      apiBaseUrl: https://api.github.com
      token: ${GITHUB_TOKEN_SECRET}
  # bitbucketCloud:
  #   - username: ${BITBUCKET_CLOUD_USERNAME}
  #     appPassword: ${BITBUCKET_CLOUD_TOKEN}
  bitbucketServer:
    - host: ${BITBUCKET_SERVER_HOST}
      apiBaseUrl: ${BITBUCKET_SERVER_BASE_URL}
      token: ${BITBUCKET_SERVER_TOKEN}
  gitlab:
   - host: gitlab.com
     token: ${GITLAB_TOKEN_SECRET}
  azure:
   - host: ${AZURE_HOST}
     credentials:
       - personalAccessToken: ${AZURE_TOKEN}

catalog:
  rules:
    - allow: [Component, API, Location, Cluster, Template, Environment, Database, Vault, Infracost, Group, User]
  providers: 
    github:
      providerId: # the provider ID can be any camelCase string
        organization: veecode-platform # string
        catalogPath: /catalog-info.yaml # string
        filters:
          branch: master # string
          repository: devportal-catalog # Regex
          validateLocationsExist: true
        schedule:        
          frequency: 
            minutes: ${GITHUB_CATALOG_PROVIDER_REFRESH_FREQUENCY}
          timeout: 
            minutes: ${GITHUB_CATALOG_PROVIDER_TIMEOUT}

    keycloakOrg:
      default:
        baseUrl: ${KEYCLOAK_HOST}
        loginRealm: ${KEYCLOAK_REALM_DEFAULT}
        realm: ${KEYCLOAK_REALM}
        username: admin
        password: admin
        schedule:        
          frequency: 
            minutes: ${KEYCLOAK_CATALOG_PROVIDER_REFRESH_FREQUENCY}
          timeout: 
            minutes: ${KEYCLOAK_CATALOG_PROVIDER_TIMEOUT}
        userQuerySize: 500
        groupQuerySize: 250

    # bitbucketCloud:
    #   yourProviderId: # identifies your ingested dataset
    #     catalogPath: /catalog-info.yaml # default value
    #     filters: # optional
    #     # projectKey: 'DEV' # optional; RegExp
    #       repoSlug: ${BITBUCKET_CLOUD_REPOSLUG} # optional; RegExp
    #     workspace: ${BITBUCKET_CLOUD_WORKSPACE}
    #      schedule:        
    #      frequency: 
    #        minutes: ${BITBUCKET_CLOUD_CATALOG_PROVIDER_REFRESH_FREQUENCY}
    #      timeout: 
    #        minutes: ${BITBUCKET_CLOUD_CATALOG_PROVIDER_TIMEOUT}

    bitbucketServer:
      yourProviderId:
        host: ${BITBUCKET_SERVER_HOST}
        catalogPath: /catalog-info.yaml # default value
        filters: # optional
          projectKey: ${BITBUCKET_SERVER_PROJECT_KEY} # optional; RegExp
          repoSlug: ${BITBUCKET_SERVER_REPOSLUG} # optional; RegExp
        schedule:        
          frequency: 
            minutes: ${BITBUCKET_SERVER_CATALOG_PROVIDER_REFRESH_FREQUENCY}
          timeout: 
            minutes: ${BITBUCKET_SERVER_CATALOG_PROVIDER_TIMEOUT}

    gitlab:
      yourProviderId:
        host: gitlab.com # Identifies one of the hosts set up in the integrations -
        branch: main # Optional. Uses `master` as default
        group: ${GITLAB_GROUP_NAME} # Optional. Group and subgroup (if needed) to look for repositories. If not present the whole project will be scanned
        entityFilename: catalog-info.yaml # Optional. Defaults to `catalog-info.yaml`
        #projectPattern: /[\s\S]*/ # Optional. Filters found projects based on provided patter. Defaults to `/[\s\S]*/`, what means to not filter anything
        schedule:        
          frequency: 
            minutes: ${GITLAB_CATALOG_PROVIDER_REFRESH_FREQUENCY}
          timeout: 
            minutes: ${GITLAB_CATALOG_PROVIDER_TIMEOUT}

    infracost:
      default:
        schedule:        
          frequency: 
            minutes: ${INFRACOST_PROVIDER_REFRESH_FREQUENCY}
          timeout: 
            minutes: ${INFRACOST_PROVIDER_TIMEOUT}
          initialDelay:
            seconds: ${INFRACOST_PROVIDER_INITIAL_DELAY}

#   locations:
#   - type: url
#     target: https://github.com/mclarke47/dice-roller/blob/master/catalog-info.yaml
#   - type: url
#     target: https://github.com/backstage/backstage/blob/master/catalog-info.yaml

scaffolder:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN_SECRET}
  gitlab:
    - host: gitlab.com
      token: ${GITLAB_TOKEN_SECRET}

search:
  pg:
    highlightOptions:
      useHighlight: true # Used to enable to disable the highlight feature. The default value is true
      maxWord: 35 # Used to set the longest headlines to output. The default value is 35.
      minWord: 15 # Used to set the shortest headlines to output. The default value is 15.
      shortWord: 3 # Words of this length or less will be dropped at the start and end of a headline, unless they are query terms. The default value of three (3) eliminates common English articles.
      highlightAll: false # If true the whole document will be used as the headline, ignoring the preceding three parameters. The default is false.
      maxFragments: 0 # Maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method. A value greater than zero selects fragment-based headline generation (see the linked documentation above for more details).
      fragmentDelimiter: ' ... ' 
    schedule:        
      frequency: 
        minutes: 3
      timeout: 
        minutes: 5

auth:
  environment: development
  ### Providing an auth.session.secret will enable session support in the auth-backend

  session:
    secret: ${AUTH_USER_SESSION_SECRET}
  providers:
    oidc:
      development:
        metadataUrl: ${KEYCLOAK_METADATA_URL}
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}
        prompt: auto
        signIn:
          resolvers:
            - resolver: emailLocalPartMatchingUserEntityName
            - resolver: emailMatchingUserEntityProfileEmail
  
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName

    gitlab:
     development:
        clientId: ${AUTH_GITLAB_CLIENT_ID}
        clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
        audience: https://gitlab.com
        ## uncomment if using a custom redirect URI
        # callbackUrl: https://${BASE_URL}/api/auth/gitlab/handler/frame
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

enabledPlugins:
  rbac: false
  vault: true
  grafana: true
  kubernetes: true
  argocd: true
  gitlabPlugin: false
  keycloak: true
  azureDevops: false
  infracost: false
  kong: true
  gitlab: false
  github: true

platform:
  behaviour: 
    mode: product #product, demo, workshop, anything else  - get config directly from here
    home: true
    catalog: true
    apis: true
    resources: true
    create: true
    docs: true
    groups: false
    apiManagement: false
  guest:
    enabled: false
  
  defaultGroup:
    enabled: false
  
  support:
    licenseKey: ${PLATFORM_LICENSE_KEY}

  group:
    admin: ${GROUP_ADMIN}
    user: ${GROUP_USER}

  apiManagement:
    enabled: false
    readOnlyMode: false #boolean

  logo:
    icon: ${LOGO_ICON_IMG_SRC} #defaults to https://platform.vee.codes/apple-touch-icon.png
    full: ${LOGO_FULL_IMG_SRC} #defaults to https://platform.vee.codes/assets/logo/logo.png

vault:
  baseUrl: ${VAULT_BASE_URL}
  token: ${VAULT_TOKEN_RENEWABLE} #generate with vault token create -policy="default" -period=24h
  #publicUrl: http://127.0.0.1:8200
  #token: vault-plaintext-root-token
  secretEngine: ${VAULT_SECRET_ENGINE} # Optional. By default it uses 'secrets'
  #kvVersion: 1

grafana:
  # Publicly accessible domain
  domain: ${GRAFANA_DOMAIN}
  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: true
#todo put into env
okta:
  host: ${OKTA_TESTE_HOST}
  token: ${OKTA_TESTE_TOKEN}

kong:
  instances:
    - id: ${KONG_INSTANCE_NAME}
      apiBaseUrl: ${KONG_API_URL}
      workspace: ${KONG_WORKSPACE}
      auth:
        custom:
          header: ${KONG_HEADER}
          value: ${KONG_HEADER_VALUES}
  
azureDevOps:
  host: ${AZURE_HOST}
  token: ${AZURE_TOKEN}
  organization: ${AZURE_ORG}