{"version":3,"file":"static/435.196f2b51.chunk.js","mappings":"4OAAA,MACA,EADoC,mBAAXA,QAAyBA,OAAOC,IAC9BD,OAAOC,IAAI,cAAgB,kB,8JC+DtD,QApCA,SAAuBC,GACrB,MAAM,SACJC,EACAC,MAAOC,GACLH,EACEI,GAAa,EAAAC,EAAA,KAMbH,EAAQ,WAAc,KAC1B,MAAMI,EAAwB,OAAfF,EAAsBD,EA9BzC,SAA8BC,EAAYD,GACxC,MAA0B,mBAAfA,EACWA,EAAWC,IAQ1B,OAAS,CAAC,EAAGA,EAAYD,EAClC,CAmBsDI,CAAqBH,EAAYD,GAInF,OAHc,MAAVG,IACFA,EAAOE,EAAA,GAAyB,OAAfJ,GAEZE,IACN,CAACH,EAAYC,IAChB,OAAoB,SAAKK,EAAA,EAAaC,SAAU,CAC9CC,MAAOT,EACPD,SAAUA,GAEd,C,0DChDe,SAASI,IAMtB,OALc,aAAiB,IAMjC,C,kCCJA,Q,QAJkC,cAAoB,K","sources":["webpack://red-hat-developer-hub.backstage-plugin-global-floating-action-button/../../node_modules/@mui/private-theming/ThemeProvider/nested.js","webpack://red-hat-developer-hub.backstage-plugin-global-floating-action-button/../../node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js","webpack://red-hat-developer-hub.backstage-plugin-global-floating-action-button/../../node_modules/@mui/private-theming/useTheme/useTheme.js","webpack://red-hat-developer-hub.backstage-plugin-global-floating-action-button/../../node_modules/@mui/private-theming/useTheme/ThemeContext.js"],"sourcesContent":["const hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested';\n\n// To support composition of theme.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n    return mergedTheme;\n  }\n  return _extends({}, outerTheme, localTheme);\n}\n\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","import * as React from 'react';\nimport ThemeContext from './ThemeContext';\nexport default function useTheme() {\n  const theme = React.useContext(ThemeContext);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(theme);\n  }\n  return theme;\n}","import * as React from 'react';\nconst ThemeContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  ThemeContext.displayName = 'ThemeContext';\n}\nexport default ThemeContext;"],"names":["Symbol","for","props","children","theme","localTheme","outerTheme","useTheme","output","mergeOuterLocalTheme","nested","ThemeContext","Provider","value"],"sourceRoot":""}