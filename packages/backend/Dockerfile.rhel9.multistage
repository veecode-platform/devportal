###
# Stage 1 - Create yarn install skeleton layer
###
FROM registry.redhat.io/rhel9/nodejs-20:latest AS packages

WORKDIR /app
COPY package.json yarn.lock ./
COPY .yarn ./.yarn
COPY .yarnrc.yml ./

COPY packages packages
COPY plugins plugins

RUN find packages \! -name "package.json" -mindepth 2 -maxdepth 2 -print | xargs rm -rf

###
# Stage 2 - Install dependencies and build packages
###
FROM registry.redhat.io/rhel9/nodejs-20:latest AS build

USER 0
# install sqlite3 dependencies
RUN yum update -y && \
    yum install zlib-devel brotli-devel sqlite-devel python3 python3-pip -y && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo && \
    yum install -y yarn

USER 1001

WORKDIR /app

COPY --from=packages --chown=1001:1001 /app .
COPY --from=packages --chown=1001:1001 /app/.yarn ./.yarn
COPY --from=packages --chown=1001:1001 /app/.yarnrc.yml  ./

# Stop cypress from downloading it's massive binary.
ENV CYPRESS_INSTALL_BINARY=0

RUN yarn install && \
    yarn cache clean

COPY --chown=1001:1001 . .

RUN yarn build

RUN mkdir packages/backend/dist/skeleton packages/backend/dist/bundle \
    && tar xzf packages/backend/dist/skeleton.tar.gz -C packages/backend/dist/skeleton \
    && tar xzf packages/backend/dist/bundle.tar.gz -C packages/backend/dist/bundle
###
# Stage 3 - Build the actual backend image and install production dependencies
###
FROM registry.redhat.io/rhel9/nodejs-20:latest

USER 0
# Install sqlite3 dependencies. You can skip this if you don't use sqlite3 in the image,
# in which case you should also move better-sqlite3 to "devDependencies" in package.json.
RUN yum update -y && \
    yum install -y sqlite-devel python3 python3-pip zlib-devel brotli-devel curl-minimal && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo && \
    yum install -y yarn && \
    yarn config set python /usr/bin/python3 && \
    pip3 install mkdocs-techdocs-core==1.2.3

USER 1001
# This should create the app dir as `node`.
# If it is instead created as `root` then the `tar` command below will fail: `can't create directory 'packages/': Permission denied`.
# If this occurs, then ensure BuildKit is enabled (`DOCKER_BUILDKIT=1`) so the app dir is correctly created as `node`.
WORKDIR /app

# Copy the install dependencies from the build stage and context
COPY --from=build --chown=1001:1001 /app/.yarn ./.yarn
COPY --from=build --chown=1001:1001 /app/.yarnrc.yml  ./
COPY --from=build --chown=1001:1001 /app/yarn.lock /app/package.json /app/packages/backend/dist/skeleton/ ./

RUN yarn workspaces focus --all --production && \
    yarn cache clean

# Copy the built packages from the build stage
COPY --from=build --chown=1001:1001 /app/packages/backend/dist/bundle/ ./

COPY --chown=1001:1001 app-config.yaml ./

ENV NODE_ENV="production"

USER 0
# Remove devportal packages
RUN rm -rf /app/packages/backend/dist/*tar.gz /app/.yarn/cache /app/.yarn/install-state.gz && \
    yum remove sqlite-devel python3-pip zlib-devel brotli-devel yarn -y

# Create the entrypoint script
COPY packages/backend/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

USER 1001

# The fix-permissions script is important when operating in environments that dynamically use a random UID at runtime, such as OpenShift.
# The upstream backstage image does not account for this and it causes the container to fail at runtime.
RUN fix-permissions /app

ENV NODE_OPTIONS="--max-old-space-size=400 --no-node-snapshot"

ENTRYPOINT ["/app/entrypoint.sh"]

CMD ["node", "packages/backend", "--config", "app-config.yaml"]