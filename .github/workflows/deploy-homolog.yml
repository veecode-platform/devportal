name: Build Deploy Devportal Homolog

on:
  workflow_dispatch:

jobs:
  requirements:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_versions.outputs.app_version }}
      chart_version: ${{ steps.get_versions.outputs.chart_version }}
      node_version: ${{ steps.get_versions.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Versions
        id: get_versions
        run: |
          echo "app_version=homolog" >> $GITHUB_OUTPUT
          chart_ver=$(yq e '.version' chart/Chart.yaml)
          echo "chart_version=${chart_ver}" >> $GITHUB_OUTPUT
          node_ver=$(cat .nvmrc | grep -o '[0-9]*')
          echo "node_version=${node_ver}" >> $GITHUB_OUTPUT

  buildDevportal:
    needs: [requirements]
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      NODE_VERSION: ${{ needs.requirements.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
      
      - name: Set Architecture
        run: echo "ARCH=$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Build Devportal
        run: |
          yarn install --frozen-lockfile
          yarn tsc
          yarn build
          jq --arg version "$(jq -r .version package.json)" '.version = $version' devportal.json > temp.json && mv temp.json devportal.json
      
      - name: Setup Keychain (macOS)
        if: runner.os == 'macOS'
        run: security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish Image to Docker Hub
        run: |
          docker build . -t veecode/devportal-bundle-${{ env.ARCH }}:${{ needs.requirements.outputs.app_version }} -f packages/backend/Dockerfile
          docker push veecode/devportal-bundle-${{ env.ARCH }}:${{ needs.requirements.outputs.app_version }}

  publishManifestDocker:
    needs: [requirements, buildDevportal]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Keychain (macOS)
        if: runner.os == 'macOS'
        run: security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }}      
      
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Publish Manifest for version ${{ needs.requirements.outputs.app_version }}
        uses: Noelware/docker-manifest-action@v2
        with:
          inputs: veecode/devportal-bundle:${{ needs.requirements.outputs.app_version }}
          images: veecode/devportal-bundle-x64:${{ needs.requirements.outputs.app_version }}
          amend: true
          push: true

      - name: Clear Docker Image (macOS)
        if: runner.os == 'macOS'
        run: docker rmi veecode/devportal-bundle-${{ env.ARCH }}:${{ needs.requirements.outputs.app_version }}

  installDevportalHomolog:
    runs-on: ubuntu-latest
    needs: [requirements, publishManifestDocker]
    steps:
      - uses: actions/checkout@v4
      - name: Setup DigitalOcean doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      - name: Install Helm 
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Helm Update Chart
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_NAME }}
          yq e ".image.tag = \"$(jq -r .version package.json)\"" -i ./chart/values.yaml
          yq e ".appVersion = \"$(jq -r .version package.json)\"" -i ./chart/Chart.yaml
          if helm ls -A | grep -q "platform-devportal-homolog"; then
            NAMESPACE=$(helm ls -A | grep platform-devportal-homolog | awk '{print $2}')
            helm get values platform-devportal-homolog -n $NAMESPACE | tail -n +2 > devportal.yaml
            yq e ".image.tag = \"${{ needs.requirements.outputs.app_version }}\"" -i devportal.yaml
            yq e ".image.pullPolicy = \"Always\"" -i devportal.yaml
            helm upgrade platform-devportal-homolog --install --recreate-pods --values devportal.yaml ./chart -n $NAMESPACE --wait --timeout 3m 
          else 
            echo "Platform devportal (Homolog) not found on ${{ secrets.CLUSTER_NAME }}"
            exit 1
          fi
