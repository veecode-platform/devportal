name: Build Deploy Devportal Homolog

on:
  workflow_dispatch:

jobs:
  # Job para capturar as versões necessárias e disponibilizá-las para os demais jobs
  requirements:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_versions.outputs.app_version }}
      chart_version: ${{ steps.get_versions.outputs.chart_version }}
      node_version: ${{ steps.get_versions.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Versions
        id: get_versions
        run: |
          echo "app_version=homolog" >> $GITHUB_OUTPUT
          chart_ver=$(yq e '.version' chart/Chart.yaml)
          echo "chart_version=${chart_ver}" >> $GITHUB_OUTPUT
          node_ver=$(cat .nvmrc | grep -o '[0-9]*')
          echo "node_version=${node_ver}" >> $GITHUB_OUTPUT

  # Job para compilar, construir e publicar a imagem Docker utilizando Buildx e QEMU
  buildAndPublish:
    needs: requirements
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: ${{ needs.requirements.outputs.node_version }}
      APP_VERSION: ${{ needs.requirements.outputs.app_version }}
      IMAGE_NAME: veecode/devportal-bundle
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install Dependencies & Build
        run: |
          yarn install --immutable
          yarn tsc
          yarn build
          jq --arg version "$(jq -r .version package.json)" '.version = $version' devportal.json > temp.json && mv temp.json devportal.json
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: packages/backend/Dockerfile
          push: true
          tags: "${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }},${{ env.IMAGE_NAME}}:homolog"
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max

  # Job para deploy usando Helm e DigitalOcean doctl
  deploy:
    needs: buildAndPublish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup DigitalOcean doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Update and Deploy Helm Chart
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_NAME }}
          yq e ".image.tag = \"$(jq -r .version package.json)\"" -i chart/values.yaml
          yq e ".appVersion = \"$(jq -r .version package.json)\"" -i chart/Chart.yaml
          if helm ls -A | grep -q "platform-devportal-homolog"; then
           NAMESPACE=$(helm ls -A | grep platform-devportal-homolog | awk -F' ' '{print $2}')
           helm get values platform-devportal-homolog -n $NAMESPACE | tail -n +2 > devportal.yaml
           helm upgrade platform-devportal-homolog --install --recreate-pods --values ./devportal.yaml ./chart -n $NAMESPACE --wait --timeout 3m 
          else 
            echo "Installation of Platform devportal (Homolog) not found on ${{ secrets.CLUSTER_NAME }}"
            exit 1
          fi
