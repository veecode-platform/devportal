name: Publish New Devportal Release

on:
  workflow_dispatch:
  push:
    branches: ['main']

permissions:
  id-token: write
  contents: write

jobs:

  requirements:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_versions.outputs.app_version }}
      chart_version: ${{ steps.get_versions.outputs.chart_version }}
      node_version: ${{ steps.get_versions.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Versions
        id: get_versions
        run: |
          echo "app_version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
          echo "chart_version=$(yq e '.version' chart/Chart.yaml)" >> $GITHUB_OUTPUT
          echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT


  #parallel build for x64 and amr64
  buildDevportal:
    needs: [requirements]
    strategy:
      matrix:
        os: 
         - ubuntu-latest
         - ubuntu-22.04-arm

    runs-on: ${{ matrix.os }}
    env:
      NODE_VERSION: ${{ needs.requirements.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Getting arch
        run: echo "ARCH=$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Building Devportal${{ runner.arch }}
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"      
        run: |
          yarn install --immutable
          cd dynamic-plugins
          yarn install
          yarn clean
          yarn tsc
          yarn build
          yarn export-dynamic
          yarn copy-dynamic-plugins dist
          cd ..
          yarn tsc
          yarn build
          jq --arg version "$(jq -r .version package.json)" '.version = $version' devportal.json > temp.json && mv temp.json devportal.json
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.dynamic
          push: true
          tags: "veecode/devportal-${{ env.ARCH }}:${{ needs.requirements.outputs.app_version }},veecode/devportal-${{ env.ARCH }}:latest"
          #cache-from: type=registry,ref=veecode/devportal:cache
          #cache-to: type=registry,ref=veecode/devportal:cache,mode=max


  publishManifestDocker:
    needs: [buildDevportal, requirements]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker buildx imagetools create -t veecode/devportal:${{ needs.requirements.outputs.app_version }} \
          -t veecode/devportal:latest \
          veecode/devportal-arm64:${{ needs.requirements.outputs.app_version }} \
          veecode/devportal-x64:${{ needs.requirements.outputs.app_version }}